{"version":3,"sources":["Components/Header/Header.module.scss","Components/Footer/Footer.module.scss","Components/common/InfoIcon.module.scss","Components/Footer/Footer.js","Components/Header/Header.js","store/consts.js","store/actions.js","Components/DrawData/DataCountInput/DataCountInput.js","Components/common/InfoIcon.js","Components/DrawData/DataPlayer/DataPlayer.js","Components/DrawData/DataPlayerList/DataPlayerList.js","Components/DrawData/DataRandTeamBtn/DataRandTeamBtn.js","Components/DrawData/DataPlayerInput/DataPlayerInput.js","Components/DrawData/DrawData.js","store/tooltipReducer.js","Components/DrawData/DrawDataContainer.js","Components/Teams/TeamPlayer/TeamPlayer.js","Components/Teams/Team/Team.js","Components/Teams/Teams.js","Components/Teams/TeamsContainer.js","App.js","reportWebVitals.js","store/inputDataReducer.js","store/errorReducer.js","store/teamsReducer.js","store/store.js","index.js"],"names":["module","exports","Footer","className","s","footer","Header","header","title","ADD_NEW_PLAYERS","CHANGE_PLAYER_BASKET","CALC_BASKET_LENGTH","CHANGE_TEAMS_COUNT","CHANGE_MAX_TEAM_PLAYERS","CHANGE_MIN_TEAM_PLAYERS","TOGGLE_RANDOM","TOGGLE_PLAYERS_FOCUS","TOGGLE_TEAMS_FOCUS","UPDATE_SUBS","DIVIDE_TEAMS","SCROLL_TO_TEAMS","DIVIDE_BASKET_TEAMS","CHANGE_TEAM_COLOR","PREPARE_PLAYERLIST","PREPARE_BASKET_LIST","RESET_TEAM_COLORS","CHECK_TEAMS_COUNT","CHECK_MAX_TEAM_PLAYERS","CHECK_MIN_TEAM_PLAYERS","CHECK_VALIDATION","CHECK_FOR_REPEATED_PLAYERS","CHECK_REQUIRED_PLAYERS","CHECK_BASKET_LENGTH_ERR","calcBasketLengthAC","type","CONST","updateSubsAC","togglePlayersFocusAC","isFocused","toggleTeamsFocusAC","checkValidationAC","checkBasketLengthErrAC","playerList","totalTeams","data","checkRequiredPlayersAC","minPlayersCount","state","minPlayersInTeam","DataCountInput","props","onChange","e","onCountChange","target","value","onBlur","onCountBlur","onFocus","toggleFocus","inputClassName","maxLength","connect","tooltips","tooltipReducer","useEffect","ReactTooltip","rebuild","tooltip","find","tip","name","tipName","infoIcon","xmlns","viewBox","tipText","d","DataPlayer","useState","clicked","setClicked","error","repeatedPlayers","isValid","subs","repeated","filledBasket","onClick","onPlayerClick","id","basket","basketTipName","DataPlayerList","map","player","message","DataRandTeamBtn","toggleRandomCreator","isRandom","DataPlayerInput","rows","setRows","helpMsg","useRef","showErr","current","scrollIntoView","block","ref","onInputChangeTC","split","length","onInputBlur","placeholder","DrawData","requiredPlayers","onTeamCountChangeTC","onTeamCountBlurTC","onMaxPlayersChangeTC","onMaxPlayersBlurTC","maxPlayersInTeam","reqiuredPlayers","onInputBlurTC","onDataPlayerClickTC","toggleRandomAC","disabled","divideTeamsTC","PLAYER_BASKET_TIP","TEAM_COLOR_TIP","initialState","mapDispatchToProps","count","dispatch","getState","changeTeamsCountAC","inputDataReducer","checkTeamsCountAC","setTimeout","changeMaxTeamPlayersAC","checkMaxTeamPlayersAC","errorReducer","some","prepareBasketListAC","divideBasketTeamsAC","preparePlayerListAC","divideTeamsAC","text","addNewPlayersAC","checkForRepeatedPlayersAC","playerId","changePlayerBasketAC","DrawDataContainer","teams","TeamPlayer","Team","team","teamId","teamScroll","isSub","changeTeamColor","color","squad","Teams","teamTipName","changeTeamColorAC","TeamsContainer","teamsReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","inputPlayers","inputTeams","action","arrPlayerList","convertTextToArr","idx","checkForSubsPlayers","setMaxPlayers","samePlayer","i","toUpperCase","filter","p","chars","arrList","array","splice","emptyLineCheck","item","replace","trim","char","playerIdx","isErrors","key","preparedList","colorList","usedById","shuffledList","basketList","reduce","baskets","createNewTeams","forEach","teamIdx","restPlayersCount","nextPlayerIndex","computedPlayersCount","restTeamsCount","Math","ceil","teamsColors","currentColor","currentIdx","indexOf","setNextTeamColor","list","mainList","subList","randomIndex","floor","random","startIdx","reducers","combineReducers","store","createStore","applyMiddleware","thunkCreator","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ad0b756.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1iLHa\",\"title\":\"Header_title__3D_WK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3IF55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoIcon\":\"InfoIcon_infoIcon__1GsYT\"};","import { React } from \"react\";\r\nimport s from \"./Footer.module.scss\";\r\n\r\nconst Footer = () => {\r\n  return <footer className={s.footer}>developed by Pavel Klenin</footer>;\r\n};\r\n\r\nexport default Footer;","import { React } from \"react\";\r\nimport s from \"./Header.module.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={s.header}>\r\n      <h1 className={s.title}>Симулятор Жеребьевки</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","//* inputDataReducer\r\nexport const ADD_NEW_PLAYERS = \"ADD_NEW_PLAYERS\";\r\nexport const CHANGE_PLAYER_BASKET = \"CHANGE_PLAYER_BASKET\";\r\nexport const CALC_BASKET_LENGTH = \"CHECK_BASKET_LENGTH\";\r\nexport const CHANGE_TEAMS_COUNT = \"CHANGE_TEAMS_COUNT\";\r\nexport const CHANGE_MAX_TEAM_PLAYERS = \"CHANGE_MAX_TEAM_PLAYERS\";\r\nexport const CHANGE_MIN_TEAM_PLAYERS = \"CHANGE_MIN_TEAM_PLAYERS\";\r\nexport const TOGGLE_RANDOM = \"TOGGLE_RANDOM\";\r\nexport const TOGGLE_PLAYERS_FOCUS = \"TOGGLE_PLAYERS_FOCUS\";\r\nexport const TOGGLE_TEAMS_FOCUS = \"TOGGLE_TEAMS_FOCUS\";\r\nexport const UPDATE_SUBS = \"UPDATE_SUBS\";\r\n\r\n//* teamsReducer\r\nexport const DIVIDE_TEAMS = \"DIVIDE_TEAMS\";\r\nexport const SCROLL_TO_TEAMS = \"SCROLL_TO_TEAMS\";\r\nexport const DIVIDE_BASKET_TEAMS = \"DIVIDE_BASKET_TEAMS\";\r\nexport const CHANGE_TEAM_COLOR = \"CHANGE_TEAM_COLOR\";\r\nexport const PREPARE_PLAYERLIST = \"PREPARE_PLAYERLIST\";\r\nexport const PREPARE_BASKET_LIST = \"PREPARE_BASKET_LIST\";\r\nexport const RESET_TEAM_COLORS = \"RESET_TEAM_COLORS\";\r\n\r\n//* errorReducer\r\nexport const CHECK_TEAMS_COUNT = \"CHECK_TEAMS_COUNT\";\r\nexport const CHECK_MAX_TEAM_PLAYERS = \"CHECK_MAX_TEAM_PLAYERS\";\r\nexport const CHECK_MIN_TEAM_PLAYERS = \"CHECK_MIN_TEAM_PLAYERS\";\r\nexport const CHECK_VALIDATION = \"CHECK_VALIDATION\";\r\nexport const CHECK_FOR_REPEATED_PLAYERS = \"CHECK_FOR_REPEATED_PLAYERS\";\r\nexport const SET_REPEATED_ERR_MSG = \"SET_REPEATED_ERR_MSG\";\r\nexport const RESET_REPEATED_ERR_MSG = \"RESET_REPEATED_PLAYERS\";\r\nexport const CHECK_REQUIRED_PLAYERS = \"CHECK_REQUIRED_PLAYERS\";\r\nexport const SET_REQUIRED_ERR_MSG = \"SET_REQUIRED_ERR_MSG\";\r\nexport const RESET_REQUIRED_ERR_MSG = \"RESET_REQUIRED\";\r\nexport const SET_NOT_ENOUGH_ERR_MSG = \"SET_NOT_ENOUGH_ERR_MSG\";\r\nexport const RESET_NOT_ENOUGH_ERR_MSG = \"RESET_NOT_ENOUGH_ERR_MSG\";\r\nexport const CHECK_BASKET_LENGTH_ERR = \"CHECK_BASKET_LENGTH_ERR\";\r\n","import * as CONST from \"./consts\";\r\n\r\n//* inputDataReducer\r\nconst addNewPlayersAC = (text) => {\r\n  return { type: CONST.ADD_NEW_PLAYERS, value: text };\r\n};\r\nexport const changePlayerBasketAC = (playerId) => {\r\n  return { type: CONST.CHANGE_PLAYER_BASKET, playerId };\r\n};\r\nconst calcBasketLengthAC = () => {\r\n  return { type: CONST.CALC_BASKET_LENGTH };\r\n};\r\nconst changeTeamsCountAC = (count) => {\r\n  return { type: CONST.CHANGE_TEAMS_COUNT, value: count };\r\n};\r\nconst changeMaxTeamPlayersAC = (count) => {\r\n  return { type: CONST.CHANGE_MAX_TEAM_PLAYERS, value: count };\r\n};\r\nconst checkTeamsCountAC = (count) => {\r\n  return { type: CONST.CHECK_TEAMS_COUNT, value: count };\r\n};\r\nconst checkMaxTeamPlayersAC = (count) => {\r\n  return { type: CONST.CHECK_MAX_TEAM_PLAYERS, value: count };\r\n};\r\nconst updateSubsAC = () => {\r\n  return { type: CONST.UPDATE_SUBS };\r\n};\r\nexport const togglePlayersFocusAC = (isFocused) => {\r\n  return { type: CONST.TOGGLE_PLAYERS_FOCUS, isFocused };\r\n};\r\nexport const toggleTeamsFocusAC = (isFocused) => {\r\n  return { type: CONST.TOGGLE_TEAMS_FOCUS, isFocused };\r\n};\r\nexport const toggleRandomAC = () => {\r\n  return { type: CONST.TOGGLE_RANDOM };\r\n};\r\n\r\n//* teamsReducer\r\nconst divideTeamsAC = (totalTeams, maxPlayersInTeam) => {\r\n  return { type: CONST.DIVIDE_TEAMS, data: { totalTeams, maxPlayersInTeam } };\r\n};\r\nexport const scrollToTeamsAC = () => {\r\n  return { type: CONST.SCROLL_TO_TEAMS };\r\n};\r\nconst divideBasketTeamsAC = (totalTeams, maxPlayersInTeam) => {\r\n  return {\r\n    type: CONST.DIVIDE_BASKET_TEAMS,\r\n    data: { totalTeams, maxPlayersInTeam },\r\n  };\r\n};\r\nexport const changeTeamColorAC = (teamId) => {\r\n  return { type: CONST.CHANGE_TEAM_COLOR, teamId };\r\n};\r\nexport const resetTeamColorsAC = () => {\r\n  return { type: CONST.RESET_TEAM_COLORS };\r\n};\r\nexport const preparePlayerListAC = (playerList, isRandom) => {\r\n  return { type: CONST.PREPARE_PLAYERLIST, data: { playerList, isRandom } };\r\n};\r\nexport const prepareBasketListAC = (playerList, isRandom) => {\r\n  return { type: CONST.PREPARE_BASKET_LIST, data: { playerList, isRandom } };\r\n};\r\n\r\n//* errorReducer\r\nconst checkValidationAC = () => {\r\n  return { type: CONST.CHECK_VALIDATION };\r\n};\r\nconst checkForRepeatedPlayersAC = (playerList) => {\r\n  return { type: CONST.CHECK_FOR_REPEATED_PLAYERS, playerList };\r\n};\r\nconst checkBasketLengthErrAC = (playerList, totalTeams) => {\r\n  return {\r\n    type: CONST.CHECK_BASKET_LENGTH_ERR,\r\n    data: { playerList, totalTeams },\r\n  };\r\n};\r\nconst checkRequiredPlayersAC = (playerList, minPlayersCount, isFocused) => {\r\n  return {\r\n    type: CONST.CHECK_REQUIRED_PLAYERS,\r\n    data: { playerList, minPlayersCount, isFocused },\r\n  };\r\n};\r\n\r\n//* ThunkCreators\r\nexport const onInputChangeTC = (text) => (dispatch, getState) => {\r\n  dispatch(addNewPlayersAC(text));\r\n  dispatch(updateSubsAC());\r\n  dispatch(calcBasketLengthAC());\r\n  const state = getState().inputDataReducer;\r\n  const { playerList, totalTeams, isFocused } = state;\r\n  dispatch(\r\n    checkRequiredPlayersAC(playerList, minPlayersCount(state), isFocused)\r\n  );\r\n  dispatch(checkForRepeatedPlayersAC(playerList));\r\n  dispatch(checkBasketLengthErrAC(playerList, totalTeams));\r\n  dispatch(checkValidationAC());\r\n};\r\nexport const onInputBlurTC = () => (dispatch, getState) => {\r\n  // ждем 500мс на случай, если сразу установили фокус на поле ввода числа команд\r\n  // (чтобы избежать прокрутки к ошибке)\r\n  setTimeout(() => {\r\n    dispatch(togglePlayersFocusAC(false));\r\n    const state = getState().inputDataReducer;\r\n    dispatch(\r\n      checkRequiredPlayersAC(\r\n        state.playerList,\r\n        minPlayersCount(state),\r\n        state.isFocused\r\n      )\r\n    );\r\n  }, 500);\r\n};\r\n\r\nexport const onDataPlayerClickTC = (playerId) => (dispatch, getState) => {\r\n  dispatch(changePlayerBasketAC(playerId));\r\n  dispatch(calcBasketLengthAC());\r\n  const { playerList, totalTeams } = getState().inputDataReducer;\r\n  dispatch(checkBasketLengthErrAC(playerList, totalTeams));\r\n  dispatch(checkValidationAC());\r\n};\r\n\r\nexport const onTeamCountChangeTC = (count) => (dispatch, getState) => {\r\n  dispatch(changeTeamsCountAC(count));\r\n  dispatch(updateSubsAC());\r\n  dispatch(calcBasketLengthAC());\r\n  const state = getState().inputDataReducer;\r\n  const { playerList, totalTeams, isFocused } = state;\r\n  dispatch(\r\n    checkRequiredPlayersAC(playerList, minPlayersCount(state), isFocused)\r\n  );\r\n  dispatch(checkBasketLengthErrAC(playerList, totalTeams));\r\n  dispatch(checkValidationAC());\r\n};\r\n\r\nexport const onTeamCountBlurTC = (count) => (dispatch, getState) => {\r\n  // ждем 500мс на случай, если сразу установили фокус на поле ввода игроков\r\n  // (чтобы избежать прокрутки к ошибке)\r\n  dispatch(checkTeamsCountAC(count));\r\n  dispatch(updateSubsAC());\r\n  dispatch(calcBasketLengthAC());\r\n  setTimeout(() => {\r\n    dispatch(toggleTeamsFocusAC(false));\r\n    const state = getState().inputDataReducer;\r\n    const { playerList, totalTeams, isFocused } = state;\r\n    dispatch(\r\n      checkRequiredPlayersAC(playerList, minPlayersCount(state), isFocused)\r\n    );\r\n    dispatch(checkBasketLengthErrAC(playerList, totalTeams));\r\n    dispatch(checkValidationAC());\r\n  }, 500);\r\n};\r\n\r\nexport const onMaxPlayersChangeTC = (count) => (dispatch) => {\r\n  dispatch(changeMaxTeamPlayersAC(count));\r\n  dispatch(updateSubsAC());\r\n};\r\nexport const onMaxPlayersBlurTC = (count) => (dispatch) => {\r\n  dispatch(checkMaxTeamPlayersAC(count));\r\n  dispatch(updateSubsAC());\r\n};\r\n\r\nexport const divideTeamsTC = () => (dispatch, getState) => {\r\n  dispatch(checkValidationAC());\r\n  const isValid = getState().errorReducer.isValid;\r\n  const { playerList, isRandom, totalTeams, maxPlayersInTeam } =\r\n    getState().inputDataReducer;\r\n  if (isValid) {\r\n    dispatch(resetTeamColorsAC());\r\n    if (playerList.some((player) => player.basket)) {\r\n      dispatch(prepareBasketListAC(playerList, isRandom));\r\n      dispatch(divideBasketTeamsAC(totalTeams, maxPlayersInTeam));\r\n    } else {\r\n      dispatch(preparePlayerListAC(playerList, isRandom));\r\n      dispatch(divideTeamsAC(totalTeams, maxPlayersInTeam));\r\n    }\r\n    // В данном случае не важно, true или false. При любой смене будет происходить прокрутка к командам.\r\n    // Смена просиходит только при нажатии кнопки деления\r\n    dispatch(scrollToTeamsAC());\r\n  }\r\n};\r\n\r\nconst minPlayersCount = (state) => {\r\n  return state.totalTeams * state.minPlayersInTeam;\r\n};\r\n","import { React } from \"react\";\r\nimport \"../DrawData.scss\";\r\n\r\nconst DataCountInput = (props) => {\r\n  const onChangeValue = (e) => {\r\n    props.onCountChange(e.target.value);\r\n  };\r\n  const onBlur = (e) => {\r\n    props.onCountBlur(e.target.value);\r\n  };\r\n  const onFocus = () => {\r\n    props.toggleFocus && props.toggleFocus(true);\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <span className=\"conditions_text\">{props.title}</span>\r\n      <input\r\n        onChange={onChangeValue}\r\n        onBlur={onBlur}\r\n        onFocus={onFocus}\r\n        className={`${props.inputClassName} conditions_count`}\r\n        type=\"text\"\r\n        maxLength={props.maxLength}\r\n        value={props.value}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataCountInput;\r\n","import { connect } from \"react-redux\";\r\nimport { useEffect, React } from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport s from \"./InfoIcon.module.scss\";\r\n\r\nconst InfoIcon = (props) => {\r\n  useEffect(() => {\r\n    ReactTooltip.rebuild();\r\n  });\r\n\r\n  const tooltip = props.tooltips.find((tip) => tip.name === props.tipName);\r\n\r\n  return (\r\n    tooltip && (\r\n      <svg\r\n        className={s.infoIcon}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        data-tip={tooltip.tipText}\r\n        data-place=\"top\"\r\n        data-multiline={true}\r\n        data-event=\"click\"\r\n        data-event-off=\"mouseout\">\r\n        <path d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003 6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 7 L 11 9 L 13 9 L 13 7 L 11 7 z M 11 11 L 11 17 L 13 17 L 13 11 L 11 11 z\" />\r\n      </svg>\r\n    )\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tooltips: state.tooltipReducer.tooltips,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(InfoIcon);\r\n","import { useState, React } from \"react\";\r\nimport \"../DrawData.scss\";\r\nimport InfoIcon from \"./../../common/InfoIcon\";\r\n\r\nconst DataPlayer = (props) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const onPlayerClick = () => {\r\n    if (!error) {\r\n      props.onPlayerClick(props.id);\r\n      setClicked(true); \r\n    }\r\n  };\r\n\r\n  const error = props.error.repeatedPlayers.isValid ? false : true;\r\n\r\n  return (\r\n    <p\r\n      className={`player ${props.subs || error ? \"disabledPlayer\" : \"\"}  ${\r\n        props.repeated || props.filledBasket ? \"errorPlayer\" : \"\"\r\n      }`}\r\n      onClick={onPlayerClick}>\r\n      {props.name}\r\n      {props.basket > 0 ? (\r\n        <span className={`basket basket${props.basket}`}>{props.basket}</span>\r\n      ) : (\r\n        !error &&\r\n        !clicked &&\r\n        props.id === 1 && <InfoIcon tipName={props.basketTipName} />\r\n        // иконка появляется только у первого игрока и скрывается при нажатии на\r\n        // поле игрока, когда выводится значение \"корзины\" (и при наличии ошибки\r\n        // поля игрока), т.к. подсказка больше не нужна\r\n      )}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default DataPlayer;\r\n","import { React } from \"react\";\r\nimport DataPlayer from \"../DataPlayer/DataPlayer\";\r\nimport \"../DrawData.scss\";\r\n\r\nconst DataPlayerList = (props) => {\r\n  const playerList = props.playerList.map((player) => {\r\n    return (\r\n      <DataPlayer\r\n        key={player.id}\r\n        {...player}\r\n        error={props.error}\r\n        basketTipName={props.basketTipName}\r\n        onPlayerClick={props.onPlayerClick}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"playerDiv\">\r\n      <p className=\"errors\">\r\n        {props.error.repeatedPlayers.message ||\r\n          props.error.filledBasket.message}\r\n      </p>\r\n      {props.playerList ? playerList : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataPlayerList;\r\n","import { React } from \"react\";\r\nimport \"../DrawData.scss\";\r\n\r\nconst DataRandTeamBtn = (props) => {\r\n  const toggleRandom = () => {\r\n    // props.toggleRandomCreator(e.target.checked); // для checkbox\r\n    props.toggleRandomCreator(); // для div\r\n  };\r\n  return (\r\n    <div className={props.className}>\r\n      <span className=\"conditions_text\">{props.title}</span>\r\n      <div onClick={toggleRandom} className={`${props.inputClassName} conditions_count`}>\r\n        {props.isRandom && <div className=\"checked\"></div> }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataRandTeamBtn;\r\n","import { useRef, useState, React } from \"react\";\r\nimport \"../DrawData.scss\";\r\n\r\nconst DataPlayerInput = (props) => {\r\n  const [rows, setRows] = useState(0);\r\n  const helpMsg = useRef();\r\n\r\n  if (!props.error.isValid && props.error.showErr) {\r\n    helpMsg.current.scrollIntoView({ block: \"center\" });\r\n  }\r\n\r\n  const onInputChange = (e) => {\r\n    props.onInputChangeTC(e.target.value);\r\n    setRows(e.target.value.split(\"\\n\").length);\r\n  };\r\n  const onInputBlur = () => {\r\n    props.onInputBlur(false);\r\n  };\r\n  const onInputFocus = () => {\r\n    props.toggleFocus(true);\r\n    helpMsg.current.scrollIntoView();\r\n  };\r\n  return (\r\n    <div className=\"playerInput\">\r\n      <pre className=\"errors\" ref={helpMsg}>\r\n        {!props.error.isValid && props.error.showErr && props.error.message}\r\n      </pre>\r\n      <textarea\r\n        rows={rows}\r\n        onChange={onInputChange}\r\n        onBlur={onInputBlur}\r\n        onFocus={onInputFocus}\r\n        className=\"list\"\r\n        placeholder=\"Список участников\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataPlayerInput;\r\n","import { React } from \"react\";\r\nimport \"./DrawData.scss\";\r\nimport DataCountInput from \"./DataCountInput/DataCountInput\";\r\nimport DataPlayerList from \"./DataPlayerList/DataPlayerList\";\r\nimport DataRandTeamBtn from \"./DataRandTeamBtn/DataRandTeamBtn\";\r\nimport DataPlayerInput from \"./DataPlayerInput/DataPlayerInput\";\r\n\r\nconst DrawData = (props) => {\r\n  const divideTeams = () => {\r\n    props.divideTeamsTC();\r\n  };\r\n  return (\r\n    <div className=\"data-content\">\r\n      <div className=\"countInputsSm\">\r\n        <p className=\"errors\"></p>\r\n        <DataCountInput\r\n          className=\"teamCondition\"\r\n          title=\"Количество команд:\"\r\n          inputClassName=\"teamsCount\"\r\n          error={props.error.requiredPlayers}\r\n          onCountChange={props.onTeamCountChangeTC}\r\n          onCountBlur={props.onTeamCountBlurTC}\r\n          toggleFocus={props.toggleTeamsFocusAC}\r\n          maxLength=\"2\"\r\n          value={props.totalTeams}\r\n        />\r\n        <DataCountInput\r\n          className=\"playersCondition\"\r\n          title=\"Количество&nbsp;игроков&nbsp;в&nbsp;команде&nbsp;(max):\"\r\n          inputClassName=\"maxPlayersCount\"\r\n          onCountChange={props.onMaxPlayersChangeTC}\r\n          onCountBlur={props.onMaxPlayersBlurTC}\r\n          maxLength=\"3\"\r\n          value={props.maxPlayersInTeam}\r\n        />\r\n      </div>\r\n      <DataPlayerInput\r\n        isFocused={props.isFocused}\r\n        error={props.error.reqiuredPlayers}\r\n        onInputChangeTC={props.onInputChangeTC}\r\n        onInputBlur={props.onInputBlurTC}\r\n        toggleFocus={props.togglePlayersFocusAC}\r\n        className=\"list\"\r\n        placeholder=\"Список участников\"\r\n      />\r\n      <DataPlayerList\r\n        basketTipName={props.basketTipName}\r\n        error={props.error}\r\n        playerList={props.playerList}\r\n        onPlayerClick={props.onDataPlayerClickTC}\r\n      />\r\n      <div className=\"conditions\">\r\n        <div className=\"countInputsLg\">\r\n          <p className=\"errors\"></p>\r\n          <DataCountInput\r\n            className=\"teamCondition\"\r\n            title=\"Количество команд:\"\r\n            inputClassName=\"teamsCount\"\r\n            error={props.error.requiredPlayers}\r\n            onCountChange={props.onTeamCountChangeTC}\r\n            onCountBlur={props.onTeamCountBlurTC}\r\n            toggleFocus={props.toggleTeamsFocusAC}\r\n            maxLength=\"2\"\r\n            value={props.totalTeams}\r\n          />\r\n          <DataCountInput\r\n            className=\"playersCondition\"\r\n            title=\"Количество&nbsp;игроков&nbsp;в&nbsp;команде&nbsp;(max):\"\r\n            inputClassName=\"maxPlayersCount\"\r\n            onCountChange={props.onMaxPlayersChangeTC}\r\n            onCountBlur={props.onMaxPlayersBlurTC}\r\n            maxLength=\"3\"\r\n            value={props.maxPlayersInTeam}\r\n          />\r\n        </div>\r\n        <DataRandTeamBtn\r\n          className=\"playersCondition\"\r\n          inputClassName=\"randomToggle\"\r\n          title=\"Поделить в случайном порядке: \"\r\n          toggleRandomCreator={props.toggleRandomAC}\r\n          isRandom={props.isRandom}\r\n        />\r\n        <button\r\n          disabled={!props.isValid}\r\n          onClick={divideTeams}\r\n          className=\"divideBtn btn\">\r\n          Поделить\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DrawData;\r\n","export const PLAYER_BASKET_TIP = \"PLAYER_BASKET_TIP\";\r\nexport const TEAM_COLOR_TIP = \"TEAM_COLOR_TIP\";\r\n\r\nconst initialState = {\r\n  tooltips:[\r\n    {\r\n      id: 1,\r\n      name: PLAYER_BASKET_TIP,\r\n      tipText:\r\n        \"Изменить «корзину» участника<br/>(для «рейтинговой» жеребьёвки<br/>с предварительным «посевом»)\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: TEAM_COLOR_TIP,\r\n      tipText: \"Изменить цвет команды\",\r\n    },\r\n  ],\r\n} \r\nconst tooltipReducer = (state = initialState) => {\r\n  return state;\r\n}\r\nexport default tooltipReducer;\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  divideTeamsTC,\r\n  onMaxPlayersChangeTC,\r\n  onMaxPlayersBlurTC,\r\n  onTeamCountChangeTC,\r\n  onTeamCountBlurTC,\r\n  toggleRandomAC,\r\n  onInputChangeTC,\r\n  onInputBlurTC,\r\n  togglePlayersFocusAC,\r\n  toggleTeamsFocusAC,\r\n  onDataPlayerClickTC\r\n} from \"../../store/actions\";\r\nimport DrawData from \"./DrawData\";\r\nimport { PLAYER_BASKET_TIP } from '../../store/tooltipReducer';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    playerList: state.inputDataReducer.playerList,\r\n    totalTeams: state.inputDataReducer.totalTeams,\r\n    maxPlayersInTeam: state.inputDataReducer.maxPlayersInTeam,\r\n    isRandom: state.inputDataReducer.isRandom,\r\n    isFocused: state.inputDataReducer.isFocused,\r\n    teams: state.inputDataReducer.teams,\r\n    isValid: state.errorReducer.isValid,\r\n    error: state.errorReducer.error,\r\n    basketTipName: PLAYER_BASKET_TIP, \r\n  }\r\n\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onTeamCountChangeTC,\r\n  onTeamCountBlurTC,\r\n  onMaxPlayersChangeTC,\r\n  onMaxPlayersBlurTC,\r\n  divideTeamsTC,\r\n  toggleRandomAC,\r\n  onInputChangeTC,\r\n  onInputBlurTC,\r\n  togglePlayersFocusAC,\r\n  toggleTeamsFocusAC,\r\n  onDataPlayerClickTC\r\n};\r\n\r\nconst DrawDataContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DrawData);\r\n\r\nexport default DrawDataContainer;\r\n","import { React } from 'react';\r\nimport \"../Teams.scss\";\r\n\r\nconst TeamPlayer = (props) => {\r\n  return (\r\n    <p className=\"newPlayer\">{props.name}</p>\r\n  )\r\n}\r\n\r\nexport default TeamPlayer;\r\n\r\n","import { useRef, useEffect, useState, React } from \"react\";\r\nimport TeamPlayer from \"../TeamPlayer/TeamPlayer\";\r\nimport \"../Teams.scss\";\r\nimport InfoIcon from \"./../../common/InfoIcon\";\r\n\r\nconst Team = (props) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  // Тут не важно, true или false. При любом изменении props.teamScroll будет\r\n  // происходить прокрутка к командам; props.teamScroll меняется только при делении\r\n  const team = useRef();\r\n  useEffect(() => {\r\n    props.teamId === 1 && team.current.scrollIntoView();\r\n  }, [props.teamScroll, props.teamId]);\r\n\r\n  const changeTeamColor = () => {\r\n    props.changeTeamColor(props.teamId);\r\n    setClicked(true);\r\n  };\r\n  return (\r\n    <div className=\"newTeam\" ref={team}>\r\n      {props.isSub ? (\r\n        <h3 className=\"teamName\">{props.title}</h3>\r\n      ) : (\r\n        <h3\r\n          onClick={changeTeamColor}\r\n          className={`teamName basicTeam ${props.color ? props.color : \"\"}`}>\r\n          {props.title}\r\n          {!clicked && props.teamId === 1 ? (\r\n            <InfoIcon tipName={props.tipName} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </h3>\r\n      )}\r\n      {props.squad.map((player) => {\r\n        return <TeamPlayer key={player.id} name={player.name} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Team;\r\n","import { React } from \"react\";\r\nimport Team from \"./Team/Team\";\r\nimport \"./Teams.scss\";\r\n\r\nconst Teams = (props) => {\r\n  return (\r\n    <div className=\"teams\" id=\"teams\">\r\n      {props.teams &&\r\n        props.teams.map((team) => {\r\n          return (\r\n            <Team\r\n              tipName={props.teamTipName}\r\n              teamScroll={props.teamScroll}\r\n              key={team.id}\r\n              {...team}\r\n              teamId={team.id}\r\n              id=\"teams\"\r\n              changeTeamColor={props.changeTeamColorAC}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Teams;\r\n","import { connect } from \"react-redux\";\r\nimport { changeTeamColorAC } from \"../../store/actions\";\r\nimport { TEAM_COLOR_TIP } from \"../../store/tooltipReducer\";\r\nimport Teams from \"./Teams\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    teams: state.teamsReducer.teams,\r\n    teamScroll: state.teamsReducer.teamScroll,\r\n    teamTipName: TEAM_COLOR_TIP,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeTeamColorAC,\r\n};\r\n\r\nconst TeamsContainer = connect(mapStateToProps, mapDispatchToProps)(Teams);\r\n\r\nexport default TeamsContainer;\r\n","import { React } from \"react\";\r\n// import s from \"./App.module.css\";\r\nimport \"./App.scss\";\r\nimport Footer from \"./Components/Footer/Footer\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport DrawDataContainer from \"./Components/DrawData/DrawDataContainer\";\r\nimport TeamsContainer from \"./Components/Teams/TeamsContainer\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <main className=\"main\">\r\n        <ReactTooltip />\r\n        <DrawDataContainer />\r\n        <TeamsContainer />\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as CONST from \"./consts\";\r\n\r\nconst initialState = {\r\n  playerList: [], // { id: 1, name: player, subs: false, basket: 0, filledBasket: false, repeated: false,}\r\n  totalTeams: 3,\r\n  maxPlayersInTeam: 5,\r\n  minPlayersInTeam: 2,\r\n  isFocused: { inputPlayers: true, inputTeams: false },\r\n  isRandom: false,\r\n};\r\n\r\nconst inputDataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONST.TOGGLE_PLAYERS_FOCUS:\r\n      return {\r\n        ...state,\r\n        isFocused: {\r\n          ...state.isFocused,\r\n          inputPlayers: action.isFocused,\r\n        },\r\n      };\r\n    case CONST.TOGGLE_TEAMS_FOCUS:\r\n      return {\r\n        ...state,\r\n        isFocused: {\r\n          ...state.isFocused,\r\n          inputTeams: action.isFocused,\r\n        },\r\n      };\r\n    case CONST.ADD_NEW_PLAYERS:\r\n      const arrPlayerList = convertTextToArr(action.value);\r\n      if (arrPlayerList) {\r\n        return {\r\n          ...state,\r\n          playerList: arrPlayerList.map((player, idx) => {\r\n            return {\r\n              id: idx + 1,\r\n              name: player,\r\n              subs: checkForSubsPlayers(idx + 1, setMaxPlayers(state)),\r\n              basket: state.playerList[idx] ? state.playerList[idx].basket : 0,\r\n              filledBasket: false,\r\n              repeated: arrPlayerList.find((samePlayer, i) => {\r\n                return (\r\n                  samePlayer.toUpperCase() === player.toUpperCase() && i !== idx\r\n                );\r\n              })\r\n                ? true\r\n                : false,\r\n            };\r\n          }),\r\n        };\r\n      } else return { ...state, playerList: [] };\r\n    case CONST.CHANGE_PLAYER_BASKET:\r\n      return {\r\n        ...state,\r\n        playerList: state.playerList.map((player) => {\r\n          if (player.id === action.playerId && !player.subs) {\r\n            return {\r\n              ...player,\r\n              basket: player.basket === 4 ? 0 : ++player.basket,\r\n            };\r\n          } else return { ...player };\r\n        }),\r\n      };\r\n    case CONST.CALC_BASKET_LENGTH:\r\n      return {\r\n        ...state,\r\n        playerList: state.playerList.map((player) => {\r\n          return {\r\n            ...player,\r\n            filledBasket:\r\n              state.playerList.filter(\r\n                (p) =>\r\n                  player.basket &&\r\n                  p.basket === player.basket &&\r\n                  !p.subs &&\r\n                  !player.subs\r\n              ).length > state.totalTeams\r\n                ? true\r\n                : false,\r\n          };\r\n        }),\r\n      };\r\n    case CONST.CHANGE_TEAMS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalTeams: action.value,\r\n      };\r\n    case CONST.CHECK_TEAMS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalTeams: action.value > 1 ? action.value : 2,\r\n      };\r\n    case CONST.CHANGE_MAX_TEAM_PLAYERS:\r\n      return {\r\n        ...state,\r\n        maxPlayersInTeam: action.value,\r\n      };\r\n    case CONST.CHECK_MAX_TEAM_PLAYERS:\r\n      return {\r\n        ...state,\r\n        maxPlayersInTeam: action.value > 1 ? action.value : 2,\r\n      };\r\n    case CONST.CHANGE_MIN_TEAM_PLAYERS:\r\n      return {\r\n        ...state,\r\n        minPlayersInTeam: action.value,\r\n      };\r\n    case CONST.CHECK_MIN_TEAM_PLAYERS:\r\n      return {\r\n        ...state,\r\n        minPlayersInTeam:\r\n          action.value > 1 && action.value <= state.maxPlayersInTeam\r\n            ? action.value\r\n            : state.maxPlayersInTeam - 1,\r\n      };\r\n    case CONST.UPDATE_SUBS:\r\n      return setMaxPlayers(state)\r\n        ? {\r\n            ...state,\r\n            playerList: state.playerList.map((player) => {\r\n              return {\r\n                ...player,\r\n                subs: checkForSubsPlayers(player.id, setMaxPlayers(state)),\r\n              };\r\n            }),\r\n          }\r\n        : state;\r\n    case CONST.TOGGLE_RANDOM:\r\n      return {\r\n        ...state,\r\n        isRandom: !state.isRandom,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default inputDataReducer;\r\n\r\n//* Additional functions\r\nconst emptyLineCheck = (array) => {\r\n  for (let i = array.length - 1; i >= 0; i--) {\r\n    if (!array[i]) {\r\n      array.splice(i, 1);\r\n    }\r\n  }\r\n};\r\n// конвертация введенных игроков в массив игроков\r\nconst convertTextToArr = (chars) => {\r\n  if (chars) {\r\n    let arrList = chars.split(\"\\n\"); // разделяем по игроков по новой строке\r\n    emptyLineCheck(arrList); // пустые строки удаляются\r\n    let correctList = arrList.map((item) => {\r\n      return item\r\n        .replace(/\\s+/g, \" \") // убираем\r\n        .trim() // лишние пробелы\r\n        .replace(/(?:^|\\s)\\S/g, (char) => char.toUpperCase()); // каждая буква после пробела, кавычек - заглавная\r\n    });\r\n    return correctList;\r\n  } else return;\r\n};\r\nconst checkForSubsPlayers = (playerIdx, setMaxPlayers) => {\r\n  return playerIdx > setMaxPlayers ? true : false;\r\n};\r\n// const createNewTeams = (state) => {\r\n//   let teams = [];\r\n//   // добавление пустых команд по количеству команд (state.totalTeams)\r\n//   for (let i = 0; i < state.totalTeams; i++) {\r\n//     teams = [\r\n//       ...teams,\r\n//       {\r\n//         id: i + 1,\r\n//         title: `Команда ${i + 1}`,\r\n//         squad: [],\r\n//         color: null,\r\n//         isSub: false,\r\n//       },\r\n//     ];\r\n//   }\r\n//   // добавление пустой команды при наличии запасных\r\n//   if (state.playerList.length > setMaxPlayers(state)) {\r\n//     teams = [\r\n//       ...teams,\r\n//       {\r\n//         id: teams.length + 1,\r\n//         title: \"Запасные\",\r\n//         squad: [],\r\n//         color: null,\r\n//         isSub: true,\r\n//       },\r\n//     ];\r\n//   }\r\n//   return teams;\r\n// };\r\nconst setMaxPlayers = (state) => {\r\n  return state.totalTeams * state.maxPlayersInTeam;\r\n};\r\n","import * as CONST from \"./consts\";\r\n\r\nconst initialState = {\r\n  isValid: false,\r\n  error: {\r\n    reqiuredPlayers: { isValid: false, showErr: false, message: \"\" },\r\n    repeatedPlayers: { isValid: true, message: \"\" },\r\n    filledBasket: { isValid: true, message: \"\" },\r\n  },\r\n};\r\n\r\nconst errorReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONST.CHECK_VALIDATION: {\r\n      const isErrors = () => {\r\n        for (let key in state.error) {\r\n          if (!state.error[key].isValid) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n      return {\r\n        ...state,\r\n        isValid: isErrors(),\r\n      };\r\n    }\r\n    case CONST.CHECK_FOR_REPEATED_PLAYERS: {\r\n      return {\r\n        ...state,\r\n        error: {\r\n          ...state.error,\r\n          repeatedPlayers: {\r\n            ...state.error.repeatedPlayers,\r\n            isValid: !action.playerList.some((player) => player.repeated),\r\n            message: action.playerList.some((player) => player.repeated)\r\n              ? \"Повторяющиеся игроки\"\r\n              : \"\",\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case CONST.CHECK_REQUIRED_PLAYERS: {\r\n      const { playerList, minPlayersCount, isFocused } = { ...action.data };\r\n      return {\r\n        ...state,\r\n        error: {\r\n          ...state.error,\r\n          reqiuredPlayers: {\r\n            ...state.error.reqiuredPlayers,\r\n            isValid: playerList.length >= minPlayersCount,\r\n            showErr: !(isFocused.inputPlayers || isFocused.inputTeams),\r\n            message: `Недостаточно игроков.\\nМинимальное количество - ${minPlayersCount}`,\r\n          },\r\n        },\r\n      };\r\n    }\r\n\r\n    case CONST.CHECK_BASKET_LENGTH_ERR:\r\n      const { playerList, totalTeams } = { ...action.data };\r\n      return {\r\n        ...state,\r\n        error: {\r\n          ...state.error,\r\n          filledBasket: {\r\n            ...state.error.filledBasket,\r\n            isValid: !playerList.some((player) => player.filledBasket)\r\n              ? true\r\n              : false,\r\n            message: !playerList.some((player) => player.filledBasket)\r\n              ? \"\"\r\n              : `Максимум игроков в каждой \"корзине\" - ${totalTeams}`,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default errorReducer;\r\n","import * as CONST from \"./consts\";\r\n\r\nconst initialState = {\r\n  preparedList: [],\r\n  colorList: [\r\n    { id: 1, color: \"teamRed\", usedById: null },\r\n    { id: 2, color: \"teamOrange\", usedById: null },\r\n    { id: 3, color: \"teamBlue\", usedById: null },\r\n    { id: 4, color: \"teamGreen\", usedById: null },\r\n    { id: 5, color: \"teamGreenYellow\", usedById: null },\r\n    { id: 6, color: \"teamBlack\", usedById: null },\r\n    { id: 7, color: \"teamWhite\", usedById: null },\r\n  ],\r\n  teams: [], // { id: 1, title: title, squad: [], color: null, isSub: false,}\r\n  teamScroll: false,\r\n};\r\n\r\nconst teamsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONST.PREPARE_PLAYERLIST: {\r\n      const { playerList, isRandom } = { ...action.data };\r\n      return {\r\n        ...state,\r\n        preparedList: isRandom ? shuffledList(playerList) : [...playerList],\r\n      };\r\n    }\r\n    case CONST.PREPARE_BASKET_LIST: {\r\n      const { playerList, isRandom } = action.data;\r\n      let basket,\r\n        basketList = [];\r\n      for (let i = 1; i <= 5; i++) {\r\n        i === 5\r\n          ? (basket = playerList.filter((player) => player.basket === 0)) // чтобы игроки из корзины 0 были в конце списка\r\n          : (basket = playerList.filter((player) => player.basket === i));\r\n        if (basket) {\r\n          basketList = [...basketList, basket];\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        preparedList: isRandom\r\n          ? basketList.reduce(\r\n              (baskets, basket) => [...baskets, ...shuffledList(basket)],\r\n              []\r\n            )\r\n          : basketList.reduce((baskets, basket) => [...baskets, ...basket], []),\r\n      };\r\n    }\r\n    case CONST.DIVIDE_BASKET_TEAMS: {\r\n      const { totalTeams, maxPlayersInTeam } = { ...action.data };\r\n      let teams = createNewTeams({\r\n        playerList: state.preparedList,\r\n        totalTeams,\r\n        maxPlayersInTeam,\r\n      });\r\n      state.preparedList.forEach((player, idx) => {\r\n        if (!player.subs) {\r\n          const teamIdx = (totalTeams + idx) % totalTeams;\r\n          teams[teamIdx].squad = [...teams[teamIdx].squad, player];\r\n        } else {\r\n          teams[totalTeams].squad = [\r\n            ...teams[totalTeams].squad,\r\n            player,\r\n          ];\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        teams,\r\n      };\r\n    }\r\n    case CONST.RESET_TEAM_COLORS:\r\n      return {\r\n        ...state,\r\n        colorList: state.colorList.map((color) => ({\r\n          ...color,\r\n          usedById: null,\r\n        })),\r\n      };\r\n    case CONST.DIVIDE_TEAMS: {\r\n      const preparedList = [...state.preparedList];\r\n      const { totalTeams, maxPlayersInTeam } = { ...action.data };\r\n      let restPlayersCount = preparedList.length; // изначально кол-во оставшихся игроков равно списку;\r\n      let nextPlayerIndex = 0; // индекс игрока, с которого надо добавлять в след.команду;\r\n      return {\r\n        ...state,\r\n        teams: createNewTeams({\r\n          playerList: preparedList,\r\n          totalTeams,\r\n          maxPlayersInTeam,\r\n        }).map((team, i) => {\r\n          // проверка на запасную команду. Т.к. i начинается с 0, утверждение будет верно только при наличии лишней (запасной) команды\r\n          let isSubsTeam = +totalTeams === i;\r\n          let restTeamsCount = totalTeams - i; // сколько осталось команд (для расчета кол-ва игроков при недоборе игроков)\r\n          let computedPlayersCount; // количество игроков в каждую команду\r\n          isSubsTeam // если есть запасные, они будут отображаться все в одной команде\r\n            ? (computedPlayersCount = restPlayersCount)\r\n            : (computedPlayersCount =\r\n                preparedList.length < setMaxPlayers(action.data) // при недоборе в каждую итерацию кол-во игроков считается относительно\r\n                  ? Math.ceil(restPlayersCount / restTeamsCount) // оставшегося количества игроков и команд для равномерного распределения\r\n                  : +maxPlayersInTeam); // преобразование в число (иначе nextPlayerIndex складывается конкатенацией)\r\n\r\n          // добавление игроков в команду\r\n          for (\r\n            let i = nextPlayerIndex;\r\n            i < nextPlayerIndex + computedPlayersCount;\r\n            i++\r\n          ) {\r\n            // проверка на наличие игрока, чтобы запасная команда не наполняла команду underfined-игроками\r\n            team.squad = [...team.squad, preparedList[i]];\r\n          }\r\n          restPlayersCount = restPlayersCount - computedPlayersCount; // для след.итераций из оставшихся игроков вычитается кол-во игроков в команде\r\n          nextPlayerIndex = nextPlayerIndex + computedPlayersCount; // индекс для след.команды равен сумме всех игроков из предыдущих команд\r\n          return team;\r\n        }),\r\n      };\r\n    }\r\n    case CONST.CHANGE_TEAM_COLOR: {\r\n      const teamsColors = [...state.colorList]; // JSON.parse(JSON.stringify(state.colorList)) - глубокая копия\r\n      const currentColor = teamsColors.find(\r\n        (color) => color.usedById === action.teamId\r\n      ); // ищем, используется ли цвет командой\r\n      if (currentColor) {\r\n        // если используется\r\n        const currentIdx = teamsColors.indexOf(currentColor); // определяем индекс объекта цвета\r\n        teamsColors[currentIdx].usedById = null; // обнуляем текущий цвет\r\n        setNextTeamColor(currentIdx + 1, teamsColors, action.teamId); // устанавливаем цвет на ближайший пустой после текущего\r\n      } else {\r\n        // если не используется\r\n        setNextTeamColor(0, teamsColors, action.teamId); // устанавливаем цвет на ближайший пустой с начала списка\r\n      }\r\n      return {\r\n        ...state,\r\n        colorList: [...teamsColors],\r\n        teams: state.teams.map((team) => {\r\n          // обнуляем текущий цвет у команды (если не обнулить, цвет команды не будет заменяться\r\n          team.color = null; // на прозрачный в конце, а последний цвет массива будет оставаться 2 щелчка)\r\n          state.colorList.forEach((color) => {\r\n            // если в списке цветов цвет занят командой,\r\n            if (color.usedById === team.id) {\r\n              // находим его\r\n              team.color = color.color; // и устанавливаем нужный цвет команде\r\n            }\r\n          });\r\n          return { ...team };\r\n        }),\r\n      };\r\n    }\r\n    case CONST.SCROLL_TO_TEAMS:\r\n      // В данном случае не важно, true или false. При любой смене будет происходить прокрутка к командам.\r\n      // Смена просиходит только при нажатии кнопки деления\r\n      return {\r\n        ...state,\r\n        teamScroll: !state.teamScroll, \r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default teamsReducer;\r\n\r\n//* Additional functions\r\nconst createNewTeams = (state) => {\r\n  let teams = [];\r\n  // добавление пустых команд по количеству команд (state.totalTeams)\r\n  for (let i = 0; i < state.totalTeams; i++) {\r\n    teams = [\r\n      ...teams,\r\n      {\r\n        id: i + 1,\r\n        title: `Команда ${i + 1}`,\r\n        squad: [],\r\n        color: null,\r\n        isSub: false,\r\n      },\r\n    ];\r\n  }\r\n  // добавление пустой команды при наличии запасных\r\n  if (state.playerList.length > setMaxPlayers(state)) {\r\n    teams = [\r\n      ...teams,\r\n      {\r\n        id: teams.length + 1,\r\n        title: \"Запасные\",\r\n        squad: [],\r\n        color: null,\r\n        isSub: true,\r\n      },\r\n    ];\r\n  }\r\n  return teams;\r\n};\r\nconst setMaxPlayers = (state) => {\r\n  return state.totalTeams * state.maxPlayersInTeam;\r\n};\r\n// алгоритм Фишера-Йейтса - Fisher–Yates shuffle\r\nconst shuffledList = (list) => {\r\n  let mainList = list.filter((player) => !player.subs);\r\n  let subList = list.filter((player) => player.subs);\r\n  for (var i = mainList.length - 1; i > 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    [mainList[randomIndex], mainList[i]] = [mainList[i], mainList[randomIndex]];\r\n  }\r\n  return [...mainList, ...subList];\r\n};\r\n// установка цвета на ближайший незанятый элемент массива\r\nconst setNextTeamColor = (startIdx, colorList, teamId) => {\r\n  for (let i = startIdx; i < colorList.length; i++) {\r\n    if (colorList[i].usedById === null) {\r\n      colorList[i].usedById = teamId;\r\n      break;\r\n    }\r\n  }\r\n};\r\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunkCreator from 'redux-thunk';\r\nimport inputDataReducer from './inputDataReducer';\r\nimport errorReducer from './errorReducer';\r\nimport teamsReducer from './teamsReducer';\r\nimport tooltipReducer from './tooltipReducer';\r\n\r\n\r\nconst reducers = combineReducers({inputDataReducer, errorReducer, teamsReducer, tooltipReducer});\r\nconst store = createStore(reducers, applyMiddleware(thunkCreator));\r\n\r\nexport default store;\r\n\r\nwindow.store = store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./store/store.js\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}